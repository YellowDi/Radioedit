--------------------------------------- 包包顯示物品等級 Author: M-------------------------------------local LibEvent = LibStub:GetLibrary("LibEvent.7000")local LibItemInfo = LibStub:GetLibrary("LibItemInfo.7000")local ARMOR = ARMOR or "Armor"local WEAPON = WEAPON or "Weapon"local RELICSLOT = RELICSLOT or "Relic"local ARTIFACT_POWER = ARTIFACT_POWER or "Artifact"local function SetItemLevel(button, ItemLink)    if (TinyInspectDB and TinyInspectDB.hideBagItemLevel) then        if (button and button.idataFrame) then            button.idataFrame:Hide()        end        return    end    if (not button) then return end    if (not button.idataFrame) then        local fontAdjust = GetLocale():sub(1,2) == "zh" and 0 or -2        button.idataFrame = CreateFrame("Frame", nil, button)        button.idataFrame:SetSize(button:GetSize())        button.idataFrame:SetPoint("CENTER")        button.levelString = button.idataFrame:CreateFontString(nil, "OVERLAY")        button.levelString:SetFont(STANDARD_TEXT_FONT, 13+fontAdjust, "OUTLINE")        button.levelString:SetPoint("TOP")        button.levelString:SetTextColor(1, 0.82, 0)        button.slotString = button.idataFrame:CreateFontString(nil, "OVERLAY")        button.slotString:SetFont(STANDARD_TEXT_FONT, 10+fontAdjust, "OUTLINE")        button.slotString:SetPoint("BOTTOMRIGHT", 1, 2)        button.slotString:SetTextColor(1, 1, 1)        button.slotString:SetJustifyH("RIGHT")        button.slotString:SetWidth(30)    end    if (button.origItemLink ~= ItemLink) then        button.origItemLink = ItemLink    else        return    end    if (ItemLink) then        local count, level, _, _, quality, _, _, class, subclass, _, equipSlot = LibItemInfo:GetItemInfo(ItemLink)        if (count == 0 and level > 0) then            if (TinyInspectDB and TinyInspectDB.showColoredItemLevelString) then                local r, g, b, hex = GetItemQualityColor(quality or 0)                level = format("|c%s%s|r", hex, level)            end            button.levelString:SetText(level)        else            button.levelString:SetText("")        end        local slotText = ""        if (equipSlot and string.find(equipSlot, "INVTYPE_")) then            slotText = _G[equipSlot] or ""        elseif (class == ARMOR) then            slotText = class        elseif (IsArtifactPowerItem(ItemLink)) then            slotText = ARTIFACT_POWER        elseif (IsArtifactRelicItem(ItemLink)) then            slotText = RELICSLOT        end        if (not TinyInspectDB or not TinyInspectDB.hideBagItemSlotString) then            button.slotString:SetText(slotText)        else            button.slotString:SetText("")        end        button.idataFrame:Show()    else        button.idataFrame:Hide()    endend-- 背包hooksecurefunc("ContainerFrame_Update", function(self)    local id = self:GetID()    local name = self:GetName()    local button    for i = 1, self.size do        button = _G[name.."Item"..i]        SetItemLevel(button, GetContainerItemLink(id, button:GetID()))    endend)-- 银行hooksecurefunc("BankFrameItemButton_Update", function(self)    if (self.isBag) then return end    SetItemLevel(self, GetContainerItemLink(self:GetParent():GetID(), self:GetID()))end)-- 商人hooksecurefunc("MerchantFrameItem_UpdateQuality", function(self, link)    SetItemLevel(self.ItemButton, link)end)-- Bagnon Combuctor LiteBag ArkInventoryLibEvent:attachEvent("PLAYER_LOGIN", function(this)    -- For Bagnon    if (Bagnon and Bagnon.ItemSlot) then        local origFunc = Bagnon.ItemSlot.Update        function Bagnon.ItemSlot:Update()            origFunc(self)            SetItemLevel(self, self:GetItem())        end    end    -- For Combuctor    if (Combuctor and Combuctor.ItemSlot) then        local origFunc = Combuctor.ItemSlot.Update        function Combuctor.ItemSlot:Update()            origFunc(self)            SetItemLevel(self, self:GetItem())        end    end    -- For LiteBag    if (LiteBagItemButton_UpdateItem) then        hooksecurefunc("LiteBagItemButton_UpdateItem", function(self)            SetItemLevel(self, GetContainerItemLink(self:GetParent():GetID(), self:GetID()))        end)    end    -- For ArkInventory    if (ArkInventory and ArkInventory.Frame_Item_Update_Texture) then        local origFunc = ArkInventory.Frame_Item_Update_Texture        function ArkInventory.Frame_Item_Update_Texture(button)            origFunc(button)            local i = ArkInventory.Frame_Item_GetDB(button)            if (i) then                SetItemLevel(button, i.h)            end        end    endend)-- GuildBank Auction GuildNewsLibEvent:attachEvent("ADDON_LOADED", function(this, arg1)    -- For GuildBank    if (arg1 == "Blizzard_GuildBankUI") then        hooksecurefunc("GuildBankFrame_Update", function()            if (GuildBankFrame.mode == "bank") then                local tab = GetCurrentGuildBankTab()                local button, index, column                for i = 1, MAX_GUILDBANK_SLOTS_PER_TAB do                    index = mod(i, NUM_SLOTS_PER_GUILDBANK_GROUP)                    if (index == 0) then                        index = NUM_SLOTS_PER_GUILDBANK_GROUP                    end                    column = ceil((i-0.5)/NUM_SLOTS_PER_GUILDBANK_GROUP)                    button = _G["GuildBankColumn"..column.."Button"..index]                    SetItemLevel(button, GetGuildBankItemLink(tab, i))                end            end        end)    -- For Auction    elseif (arg1== "Blizzard_AuctionUI") then        hooksecurefunc("AuctionFrameBrowse_Update", function()            local offset = FauxScrollFrame_GetOffset(BrowseScrollFrame)            local itemButton            for i = 1, NUM_BROWSE_TO_DISPLAY do                itemButton = _G["BrowseButton"..i.."Item"]                if (itemButton) then                    SetItemLevel(itemButton, GetAuctionItemLink("list", offset+i))                end            end        end)        hooksecurefunc("AuctionFrameBid_Update", function()            local offset = FauxScrollFrame_GetOffset(BidScrollFrame)            local itemButton            for i = 1, NUM_BIDS_TO_DISPLAY do                itemButton = _G["BidButton"..i.."Item"]                if (itemButton) then                    SetItemLevel(itemButton, GetAuctionItemLink("bidder", offset+i))                end            end        end)        hooksecurefunc("AuctionFrameAuctions_Update", function()            local offset = FauxScrollFrame_GetOffset(AuctionsScrollFrame)            local tokenCount = C_WowTokenPublic.GetNumListedAuctionableTokens()            local itemButton            for i = 1, NUM_AUCTIONS_TO_DISPLAY do                itemButton = _G["AuctionsButton"..i.."Item"]                if (itemButton) then                    SetItemLevel(itemButton, GetAuctionItemLink("owner", offset-tokenCount+i))                end            end        end)    -- For GuildNews    elseif (arg1== "Blizzard_GuildUI") then        TinyInspectCache = TinyInspectCache or {}        TinyInspectCache.GuildNews = {}        hooksecurefunc("GuildNewsButton_SetText", function(button, text_color, text, text1, text2, ...)            if (text2 and type(text2) == "string") then                local newtext = text2:gsub("(|Hitem:%d+:.-|h.-|h)", function(Hyperlink)                    local link = string.match(Hyperlink, "|H(.-)|h")                    local level                    if (TinyInspectCache.GuildNews[link]) then                        level = TinyInspectCache.GuildNews[link]                    else                        level = select(2, LibItemInfo:GetItemInfo(link))                    end                    if (level > 0) then                        TinyInspectCache.GuildNews[link] = level                        Hyperlink = Hyperlink:gsub("|h%[(.-)%]|h", "|h["..level..":%1]|h")                    end                    return Hyperlink                end)                if (newtext ~= text2) then                    button.text:SetFormattedText(text, text1, newtext, ...)                end            end        end)    endend)